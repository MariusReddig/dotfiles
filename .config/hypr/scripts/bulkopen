#!/bin/bash

# Function to check if Tor Browser is running
is_tor_browser_running() {
  pgrep -f tor-browser &> /dev/null
}

display_help() {
    cat << EOF
Usage: $0 [-d <profile>] [-t] [-r] [-c] [-s] [-p] [-l] [-C] <filename>
Options:
  -d <profile>    Use a specific Firefox profile (e.g., -d dark)
  -t              Use Tor Browser
  -r              Randomize the order of URLs
  -c              Comment out processed lines in the file with '##'
  -s              Open only one tab at a time, wait for the last one to close
  -p              Calculate the percentage of out-commented code to total non-empty lines
  -l              Output the number of non-commented links
  -C              Check for redundant links and comment them out with a '!'
  -h, --help      Display this help message
  -S              Sorts the File

Examples:
  $0 -d dark -t -r urls.txt  # Open URLs using Tor Browser with a dark Firefox profile and randomize the order
  $0 -c -s urls.txt          # Comment out processed lines and open URLs one at a time
EOF
    exit 0
}
# Default values
firefox_profile=""
use_tor=false
randomize=false
comment_lines=false
single_tab=false
calculate_percentage=false
output_unusedlines=false
sort_lines=false

# Check if a filename is provided as an argument
if [ $# -eq 0 ]; then
    display_help
    exit 1
fi

# Parse command line options
while getopts ":dtrcshplCS" opt; do
    case ${opt} in
        d)
            firefox_profile="dark"
            ;;
        t)
            use_tor=true
            ;;
        r)
            randomize=true
            ;;
        c)
            comment_lines=true
            ;;
        s)
            single_tab=true
            ;;
        p)
            calculate_percentage=true
            ;;
        l)
            output_unusedlines=true
            ;;
        h)
            display_help
            ;;
        C)
            check_redundant=true
            ;;
        S)
            sort_lines=true
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Shift command line arguments to get the filename
shift $((OPTIND - 1))

# Check if the file exists
filename=$1
if [ ! -f "$filename" ]; then
    echo "File $filename not found."
    exit 1
fi

# Count unused lines when -l flag is set
if [ "$output_unusedlines" = true ]; then
  noncommentedLines=$(grep -vE '^\s*#' "$filename" | wc -l)
  echo "links left: $noncommentedLines"
  exit 0
fi

# Calculate percentage if -p flag is set and exit
if [ "$calculate_percentage" = true ]; then
  total_lines=$(cat "$filename" | wc -l)
  commented_lines=$(grep -E '^\s*#' "$filename" | wc -l)
  if [ "$total_lines" -gt 0 ]; then
    percentage=$(( (commented_lines * 100) / total_lines ))
    echo "already watched: $percentage%"
  else
    echo "No non-empty lines found to calculate percentage."
  fi
  exit 0
fi

# Check for redundant links and comment them out
if [ "$check_redundant" = true ]; then
    # Create a temporary file to store the processed lines
    temp_file=$(mktemp)

    # Loop through each line in the file
    while IFS= read -r line; do
        # Skip commented lines
        if [[ $line =~ ^[[:space:]]*([#!-].*|$) ]]; then
            echo "$line" >> "$temp_file"
            continue
        fi
        
        # Check if the line is a duplicate
        duplicate=false
        while IFS= read -r processed_line; do
            if [ "$line" = "$processed_line" ]; then
                duplicate=true
                break
            fi
        done < "$temp_file"

        # If not a duplicate, add it to the temp file
        if [ "$duplicate" = false ]; then
            echo "$line" >> "$temp_file"
        else
            # Comment out duplicate lines
            echo "!$line" >> "$temp_file"
        fi
    done < "$filename"

    # Replace the original file with the processed temp file
    mv "$temp_file" "$filename"

    echo "Redundant links have been commented out with '!'."
    exit 0
fi

# Sort the lines of the file
if [ "$sort_lines" = true ]; then
    # Create a temporary file to store sorted lines
    temp_file=$(mktemp)

    # Extract and sort non-commented lines alphabetically
    grep -vE '^\s*([#!-]|$)' "$filename" | LC_ALL=C sort >> "$temp_file"

    # Extract and sort lines commented out with -
    grep -E '^\s*-.*$' "$filename" | LC_ALL=C sort >> "$temp_file"

    # Extract and sort lines commented out with !
    grep -E '^\s*!.*$' "$filename" | LC_ALL=C sort >> "$temp_file"

    # Extract and sort lines commented out with #
    grep -E '^\s*#.*$' "$filename" | LC_ALL=C sort >> "$temp_file"

    # Replace the original file with the sorted temp file
    mv "$temp_file" "$filename"

    echo "Lines have been sorted according to the specified order."
    exit 0
fi


# Determine the command to use (Tor Browser or Firefox with a specific profile)
if [ "$use_tor" = true ]; then
    browser_command="tor-browser"
    echo "Tor Browser can only open one instance at a time, next URL is loaded after the first instance is closed"
else
    # Check if Tor Browser is installed
    if [ ! command -v tor-browser &> /dev/null && "$use_tor" = true ]; then
      echo "Tor Browser is not installed. Please install Tor Browser and try again."
      exit 1
    fi

    # Use a specific Firefox profile if provided
    if [ -n "$firefox_profile" ]; then
        browser_command="firefox -P $firefox_profile"
    else
        browser_command="firefox"
    fi
fi

# Read and shuffle URLs if randomize is true
if [ "$randomize" = true ]; then
    urls=($(grep -vE '^\s*(#|-|$)' "$filename" | shuf))
else
    urls=($(grep -vE '^\s*(#|-|$)' "$filename"))
fi

# Check for redundant links and comment them out
if [ "$check_redundant_links" = true ]; then
    unique_urls=$(echo "${urls[@]}" | tr ' ' '\n' | sort -u)
    for url in "${urls[@]}"; do
        if [[ $(grep -c "$url" <<< "$unique_urls") -gt 1 ]]; then
            sed -i "s|^$url|!$url|" "$filename"
        fi
    done
    echo "Redundant links have been commented out with '!'."
    exit 0
fi

# Open URLs in the specified browser or calculate percentage
for line in "${urls[@]}"; do
    if [ "$calculate_percentage" = false ]; then
        if [ "$use_tor" = true ]; then
            while is_tor_browser_running; do
                sleep 1
            done
            echo "Tor Browser is not running. Starting a new instance."
            tor-browser "$line"
        else
            $browser_command "$line" &
        fi

        # Comment out the processed line in the file if -c flag is set
        if [ "$comment_lines" = true ]; then
            sed -i "s|^$line|#$line|" "$filename"
        fi

        # Wait for the last tab or browser instance to close if -s flag is set
        if [ "$single_tab" = true ]; then
            wait $(jobs -p)
        fi
    fi
done

if [ "$calculate_percentage" = false ]; then
    echo "Browser tabs opened based on the specified order or randomly (if -r flag is used) in $filename"
fi
